// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Full Process > should fully load a config from abs path #0 1`] = `
Object {
  "entry": "function-promise",
  "mode": "development",
}
`;

exports[`Full Process > should fully load config type: array #0 1`] = `
Array [
  Object {
    "entry": "array",
  },
  Object {
    "entry": "array-b",
  },
]
`;

exports[`Full Process > should fully load config type: function #0 1`] = `
Object {
  "entry": "function",
  "mode": "development",
}
`;

exports[`Full Process > should fully load config type: function-promise #0 1`] = `
Object {
  "entry": "function-promise",
  "mode": "development",
}
`;

exports[`Full Process > should fully load config type: promise #0 1`] = `
Object {
  "entry": "promise",
  "mode": "development",
}
`;

exports[`Full Process > should load with schema option #0 1`] = `
Object {
  "entry": "object",
  "mode": "development",
  "serve": Object {},
}
`;

exports[`Load > should config of type common-js #0 1`] = `
Object {
  "mode": "common-js",
}
`;

exports[`Load > should config of type es6 #0 1`] = `
Object {
  "default": Object {
    "mode": "es6",
  },
}
`;

exports[`Load > should config of type flow #0 1`] = `
Object {
  "mode": "flow",
}
`;

exports[`Load > should config of type rc #0 1`] = `
Object {
  "mode": "rc",
}
`;

exports[`Load > should config of type typescript #0 1`] = `
Object {
  "default": Object {
    "mode": "typescript",
  },
}
`;

exports[`Load > should config of type yml #0 1`] = `
Object {
  "mode": "yml",
}
`;

exports[`Load > should load with schema option #0 1`] = `
Object {
  "config": Object {
    "entry": "object",
    "mode": "development",
    "serve": Object {},
  },
  "configPath": "<PROJECT_ROOT>/test/fixtures/types/schema/webpack.config.js",
}
`;

exports[`Load > should not throw for config not found, but allowed #0 1`] = `
Object {
  "config": Object {},
  "configPath": "",
}
`;

exports[`Load > should throw error for a bad exact config #0 1`] = `"ENOENT: no such file or directory, open '<PROJECT_ROOT>/test/fixtures/failures/bad-config/webpack.config.js'"`;

exports[`Load > should throw error for a bad require #0 1`] = `"Cannot find module 'batman' from '<PROJECT_ROOT>'"`;

exports[`Load > should throw error for config not found #0 1`] = `"Unable to load a config from: ./test/fixtures/formats/not-found"`;

exports[`Resolve > should resolve a function config and parse argv #0 1`] = `
Object {
  "entry": "function",
  "mode": "superman",
}
`;

exports[`Resolve > should resolve a function config and pass argv #0 1`] = `
Object {
  "entry": "function",
  "mode": "batman",
}
`;

exports[`Resolve > should resolve type: array #0 1`] = `
Array [
  Object {
    "entry": "array",
  },
  Object {
    "entry": "array-b",
  },
]
`;

exports[`Resolve > should resolve type: function #0 1`] = `
Object {
  "entry": "function",
  "mode": "development",
}
`;

exports[`Resolve > should resolve type: function-promise #0 1`] = `
Object {
  "entry": "function-promise",
  "mode": "development",
}
`;

exports[`Resolve > should resolve type: promise #0 1`] = `
Object {
  "entry": "promise",
  "mode": "development",
}
`;

exports[`extends > should extend #0 1`] = `
Object {
  "devtool": "cheap-eval-source-map",
  "entry": Object {
    "client": Array [
      "./base/shared.js",
      "./app-entry.js",
    ],
    "server": "./app-entry.js",
  },
  "mode": "production",
  "module": Object {
    "noParse": /batman/,
    "rules": Array [
      Object {
        "test": /\\\\\\*\\.json\\$/,
        "use": Array [
          Object {
            "loader": "json-loader",
          },
        ],
      },
      Object {
        "resourceQuery": /inline/,
        "test": /\\.css\\$/,
        "use": "url-loader",
      },
      Object {
        "test": /\\\\\\.txt\\$/,
        "use": "raw-loader",
      },
      Object {
        "test": /target-file\\.js\\$/,
        "use": Array [
          Object {
            "loader": "val-loader",
          },
        ],
      },
    ],
  },
  "name": "batman",
  "output": Object {
    "filename": "[name].js",
    "path": "<PROJECT_ROOT>/test/fixtures/extends/dist",
  },
  "plugins": Array [
    DefinePlugin {
      "definitions": Object {
        "process.env.NODE_ENV": "\\"development\\"",
      },
    },
    NamedModulesPlugin {
      "options": Object {},
    },
    DefinePlugin {
      "definitions": Object {
        "process.env.NODE_ENV": "\\"production\\"",
      },
    },
  ],
}
`;

exports[`extends > should extend MultiCompilers #0 1`] = `
Array [
  Object {
    "devtool": "source-map",
    "entry": Object {
      "client": Array [
        "./base/shared.js",
      ],
      "server": "./app-entry.js",
    },
    "mode": "development",
    "module": Object {
      "noParse": /jquery\\|lodash/,
      "rules": Array [
        Object {
          "test": /\\\\\\*\\.json\\$/,
          "use": Array [
            Object {
              "loader": "json-loader",
            },
          ],
        },
        Object {
          "resourceQuery": /inline/,
          "test": /\\.css\\$/,
          "use": "url-loader",
        },
        Object {
          "test": /\\\\\\.txt\\$/,
          "use": "raw-loader",
        },
      ],
    },
    "name": "client",
    "output": Object {
      "filename": "bundle.js",
      "path": "<PROJECT_ROOT>/test/fixtures/extends/dist",
    },
    "plugins": Array [
      DefinePlugin {
        "definitions": Object {
          "process.env.NODE_ENV": "\\"production\\"",
        },
      },
      NamedModulesPlugin {
        "options": Object {},
      },
    ],
  },
  Object {
    "devtool": "source-map",
    "entry": Object {
      "client": Array [
        "./base/shared.js",
      ],
      "server": "./app-entry.js",
    },
    "mode": "development",
    "module": Object {
      "noParse": /jquery\\|lodash/,
      "rules": Array [
        Object {
          "test": /\\\\\\*\\.json\\$/,
          "use": Array [
            Object {
              "loader": "json-loader",
            },
          ],
        },
        Object {
          "resourceQuery": /inline/,
          "test": /\\.css\\$/,
          "use": "url-loader",
        },
        Object {
          "test": /\\\\\\.txt\\$/,
          "use": "raw-loader",
        },
      ],
    },
    "name": "server",
    "output": Object {
      "filename": "bundle.js",
      "path": "<PROJECT_ROOT>/test/fixtures/extends/dist",
    },
    "plugins": Array [
      DefinePlugin {
        "definitions": Object {
          "process.env.NODE_ENV": "\\"development\\"",
        },
      },
      NamedModulesPlugin {
        "options": Object {},
      },
      DefinePlugin {
        "definitions": Object {
          "process.env.NODE_ENV": "\\"production\\"",
        },
      },
    ],
  },
]
`;

exports[`extends > should extend, use default filters #0 1`] = `
Object {
  "devtool": "cheap-eval-source-map",
  "entry": Object {
    "client": Array [
      "./base/shared.js",
      "./app-entry.js",
    ],
    "server": "./app-entry.js",
  },
  "mode": "production",
  "module": Object {
    "noParse": /aquaman/,
    "rules": Array [
      Object {
        "test": /\\\\\\*\\.json\\$/,
        "use": Array [
          Object {
            "loader": "json-loader",
          },
        ],
      },
      Object {
        "resourceQuery": /inline/,
        "test": /\\.css\\$/,
        "use": "url-loader",
      },
      Object {
        "test": /\\\\\\.txt\\$/,
        "use": "raw-loader",
      },
      Object {
        "test": /target-file\\.js\\$/,
        "use": Array [
          Object {
            "loader": "val-loader",
          },
        ],
      },
    ],
  },
  "name": "batman",
  "output": Object {
    "filename": "[name].js",
    "path": "<PROJECT_ROOT>/test/fixtures/extends/dist",
  },
  "plugins": Array [
    DefinePlugin {
      "definitions": Object {
        "process.env.NODE_ENV": "\\"development\\"",
      },
    },
    NamedModulesPlugin {
      "options": Object {},
    },
    DefinePlugin {
      "definitions": Object {
        "process.env.NODE_ENV": "\\"production\\"",
      },
    },
  ],
}
`;

exports[`extends > should extend, use filters #0 1`] = `
Object {
  "devtool": "cheap-eval-source-map",
  "entry": Object {
    "client": Array [
      "./base/shared.js",
      "./app-entry.js",
    ],
    "server": "./app-entry.js",
  },
  "mode": "production",
  "module": Object {
    "noParse": /aquaman/,
    "rules": Array [
      Object {
        "test": /\\\\\\*\\.json\\$/,
        "use": Array [
          Object {
            "loader": "json-loader",
          },
        ],
      },
      Object {
        "resourceQuery": /inline/,
        "test": /\\.css\\$/,
        "use": "url-loader",
      },
      Object {
        "test": /\\\\\\.txt\\$/,
        "use": "raw-loader",
      },
      Object {
        "test": /\\\\\\*\\.json\\$/,
        "use": Array [
          Object {
            "loader": "val-loader",
          },
        ],
      },
      Object {
        "test": /target-file\\.js\\$/,
        "use": Array [
          Object {
            "loader": "val-loader",
          },
        ],
      },
    ],
  },
  "name": "batman",
  "output": Object {
    "filename": "[name].js",
    "path": "<PROJECT_ROOT>/test/fixtures/extends/dist",
  },
  "plugins": Array [
    DefinePlugin {
      "definitions": Object {
        "process.env.NODE_ENV": "\\"production\\"",
      },
    },
    NamedModulesPlugin {
      "options": Object {},
    },
  ],
}
`;

exports[`extends > should extend, use rules:none filter #0 1`] = `
Object {
  "devtool": "cheap-eval-source-map",
  "entry": Object {
    "client": Array [
      "./base/shared.js",
      "./app-entry.js",
    ],
    "server": "./app-entry.js",
  },
  "mode": "production",
  "module": Object {
    "noParse": /aquaman/,
    "rules": Array [
      Object {
        "test": /\\\\\\*\\.json\\$/,
        "use": Array [
          Object {
            "loader": "json-loader",
          },
        ],
      },
      Object {
        "resourceQuery": /inline/,
        "test": /\\.css\\$/,
        "use": "url-loader",
      },
      Object {
        "test": /\\\\\\.txt\\$/,
        "use": "raw-loader",
      },
      Object {
        "test": /target-file\\.js\\$/,
        "use": Array [
          Object {
            "loader": "val-loader",
          },
        ],
      },
    ],
  },
  "name": "batman",
  "output": Object {
    "filename": "[name].js",
    "path": "<PROJECT_ROOT>/test/fixtures/extends/dist",
  },
  "plugins": Array [
    DefinePlugin {
      "definitions": Object {
        "process.env.NODE_ENV": "\\"development\\"",
      },
    },
    NamedModulesPlugin {
      "options": Object {},
    },
    DefinePlugin {
      "definitions": Object {
        "process.env.NODE_ENV": "\\"production\\"",
      },
    },
  ],
}
`;

exports[`extends > should load and extend MultiCompilers #0 1`] = `
Array [
  Object {
    "devtool": "source-map",
    "entry": Object {
      "client": Array [
        "./base/shared.js",
      ],
      "server": "./app-entry.js",
    },
    "mode": "development",
    "module": Object {
      "noParse": /jquery\\|lodash/,
      "rules": Array [
        Object {
          "test": /\\\\\\*\\.json\\$/,
          "use": Array [
            Object {
              "loader": "json-loader",
            },
          ],
        },
        Object {
          "resourceQuery": /inline/,
          "test": /\\.css\\$/,
          "use": "url-loader",
        },
        Object {
          "test": /\\\\\\.txt\\$/,
          "use": "raw-loader",
        },
      ],
    },
    "name": "client",
    "output": Object {
      "filename": "bundle.js",
      "path": "<PROJECT_ROOT>/test/fixtures/extends/dist",
    },
    "plugins": Array [
      DefinePlugin {
        "definitions": Object {
          "process.env.NODE_ENV": "\\"production\\"",
        },
      },
      NamedModulesPlugin {
        "options": Object {},
      },
    ],
  },
  Object {
    "devtool": "source-map",
    "entry": Object {
      "client": Array [
        "./base/shared.js",
      ],
      "server": "./app-entry.js",
    },
    "mode": "development",
    "module": Object {
      "noParse": /jquery\\|lodash/,
      "rules": Array [
        Object {
          "test": /\\\\\\*\\.json\\$/,
          "use": Array [
            Object {
              "loader": "json-loader",
            },
          ],
        },
        Object {
          "resourceQuery": /inline/,
          "test": /\\.css\\$/,
          "use": "url-loader",
        },
        Object {
          "test": /\\\\\\.txt\\$/,
          "use": "raw-loader",
        },
      ],
    },
    "name": "server",
    "output": Object {
      "filename": "bundle.js",
      "path": "<PROJECT_ROOT>/test/fixtures/extends/dist",
    },
    "plugins": Array [
      DefinePlugin {
        "definitions": Object {
          "process.env.NODE_ENV": "\\"development\\"",
        },
      },
      NamedModulesPlugin {
        "options": Object {},
      },
      DefinePlugin {
        "definitions": Object {
          "process.env.NODE_ENV": "\\"production\\"",
        },
      },
    ],
  },
]
`;

exports[`extends > should load full #0 1`] = `
Object {
  "devtool": "cheap-eval-source-map",
  "entry": Object {
    "client": Array [
      "./base/shared.js",
      "./app-entry.js",
    ],
    "server": "./app-entry.js",
  },
  "mode": "production",
  "module": Object {
    "noParse": /batman/,
    "rules": Array [
      Object {
        "test": /\\\\\\*\\.json\\$/,
        "use": Array [
          Object {
            "loader": "json-loader",
          },
        ],
      },
      Object {
        "resourceQuery": /inline/,
        "test": /\\.css\\$/,
        "use": "url-loader",
      },
      Object {
        "test": /\\\\\\.txt\\$/,
        "use": "raw-loader",
      },
      Object {
        "test": /target-file\\.js\\$/,
        "use": Array [
          Object {
            "loader": "val-loader",
          },
        ],
      },
    ],
  },
  "name": "batman",
  "output": Object {
    "filename": "[name].js",
    "path": "<PROJECT_ROOT>/test/fixtures/extends/dist",
  },
  "plugins": Array [
    DefinePlugin {
      "definitions": Object {
        "process.env.NODE_ENV": "\\"development\\"",
      },
    },
    NamedModulesPlugin {
      "options": Object {},
    },
    DefinePlugin {
      "definitions": Object {
        "process.env.NODE_ENV": "\\"production\\"",
      },
    },
  ],
}
`;
